#ifndef COMMON_H
#define COMMON_H

typedef struct {
    uint size;
    char value[size];
} SString<read=Str("%s", size > 0 ? this.value : "")>;

struct Vector2 {
    float x;
    float y;
};

struct Vector3 {
    float x;
    float y;
    float z;
};

struct Vector4 {
    float x;
    float y;
    float z;
    float w;
};

struct Mat3x4 {
    float values[12];
};

struct Bounds {
    Vector3 min;
    Vector3 max;
};

struct GeometryDiskLayout {
    uint compression;
    uint uncompressedSize;
    uint compressedSize;
    uint offset;
};

struct GeometryMemoryLayout {
    uint combinedVertexMask;
    uint size;
    uint numVertexStreams;
    Assert(numVertexStreams == 4 || numVertexStreams == 5);

    uint positionMask; // 1 = unpacked, 32 = packed
    uint normalMask; // always 20
    if(numVertexStreams == 5) {
        uint uvLightmapMask; // always 64
    }
    uint uvMask; // 131072 = unpacked, 32768 = packed
    uint colorMask; // always 8

    uint positionOffset;
    uint normalOffset;
    if(numVertexStreams == 5) {
        uint uvLightmapOffset;
    }
    uint uvOffset;
    uint colorOffset;
    uint indexOffset;
};

#endif // COMMON_H
