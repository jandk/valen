package be.twofold.valen.reader.md6anim;

import be.twofold.valen.core.io.*;
import org.junit.jupiter.api.*;

import java.io.*;

import static org.assertj.core.api.Assertions.*;

class Md6MeshAnimTest {
    @Test
    void testDecodeRLE() throws IOException {
        byte[] input = {0x58, 0x05, 0x01, 0x08, 0x07, 0x0c, 0x10, (byte) 0x88, 0x01, 0x20, 0x01, 0x23, 0x02, 0x2b, 0x04, 0x35, 0x0b, 0x3a, 0x07, 0x46, 0x08, 0x4e, 0x07, 0x58, 0x0a, 0x60, 0x04, 0x6b, 0x1e, 0x1c, 0x53, (byte) 0x82, 0x74, 0x1f, 0x01, (byte) 0x8a, 0x0f, 0x20, (byte) 0x82, 0x01, 0x2f, 0x39, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0x90, 0x6d, 0x65, (byte) 0x93, 0x3f, 0x6a, (byte) 0xaf, (byte) 0xb5, 0x55, (byte) 0xeb, 0x12, 0x25, 0x00, 0x40, (byte) 0xff, 0x00, (byte) 0xff, 0x3f, (byte) 0x81, 0x42, (byte) 0xed, 0x71, 0x13, 0x31, 0x00, 0x40, 0x5f, 0x41, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, (byte) 0xfe, 0x34, 0x00, 0x40};
        int[] expected = {0x01, 0x02, 0x03, 0x04, 0x05, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, -1, -1, -1, -1, -1, -1, -1, -1, 0x20, 0x23, 0x2b, 0x2c, 0x35, 0x36, 0x37, 0x38, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6b, 0x6c, 0x6d, 0x6e};
        int[] actual = Md6Anim.decodeRLE(new ByteArrayDataSource(input), 0xff);
        assertThat(actual).isEqualTo(expected);
    }
}
